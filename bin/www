#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('MixtourEvent:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 + * SocketIo
 + */
var Matchmaking = [] ;
var CurrentGame = [];
var idCount = 0;
var gameCount = 0;
io.on('connection', function(client) {
    var id = idCount++;
    var idGame = gameCount++;
    var already = false;
      console.log('Client connected...');
      client.on('join', function(data) {
          //console.log("le id"+id);
          for (var i in Matchmaking){
              //console.log("les id"+i);
              if (Matchmaking[i] == this) already = true;
          }
          if  (! already ) {
              Matchmaking[id] = this;
          }
          console.log("ON STOCK !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"+Matchmaking.length +" "+id);
            if(Matchmaking.length >=2 ){
                var player1 = Matchmaking[0];
                var player2 = Matchmaking[1];


                var game = {P1 : player1 , P2 : player2};
                CurrentGame[idGame] = game;

                CurrentGame[idGame].P1.emit('messages','On a trouvé un adversaire');
                CurrentGame[idGame].P2.emit('messages','On a trouvé un adversaire');
                idGame++;
                Matchmaking.shift();
                Matchmaking.shift();
                idCount = Matchmaking.length;
                console.log("IL RESTE  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"+Matchmaking.length);
            }

        });

  });

io.on('disconnect', function (client) {
    console.log("deco!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
});
