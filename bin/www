#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('MixtourEvent:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 + * SocketIo
 + */
var Matchmaking = [] ;
var CurrentGame = [];
var idCount = 0;
var gameCount = 0;

io.on('connection', function(socket){
    var id = idCount++;
    var idGame = gameCount;
    socket.on('join', function (data) {
        //console.log("le id"+id);

        Matchmaking[id] = this;
        socket.emit('match', id);
        //console.log("ON STOCK !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"+Matchmaking.length +" "+id);
        if(Matchmaking.length >=2 ){
            //console.log("match !!");
            var player1 = Matchmaking[0];
            var player2 = Matchmaking[1];


            var game = {P1 : player1 , P2 : player2};
            CurrentGame[idGame] = game;

            CurrentGame[idGame].P1.emit('messages',{message: 'On a trouvé un adversaire'  ,idG : idGame});
            CurrentGame[idGame].P2.emit('messages',{message: 'On a trouvé un adversaire' ,idG : idGame});
            gameCount++;
            Matchmaking.shift();
            Matchmaking.shift();
            idCount = Matchmaking.length;
            //console.log("IL RESTE  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"+Matchmaking.length);
        }
    });


    socket.on('play', function(data) {
        if (data.id % 2 != 0) {
            CurrentGame[data.idGame].P1.emit('opponentPlays', {x: data.x, y: data.y});
        }
        else {
            CurrentGame[data.idGame].P2.emit('opponentPlays', {x: data.x, y: data.y});
        }
    });

    socket.on('wrongPlay', function(data) {
        if (data.id % 2 != 0) {
            CurrentGame[data.idGame].P1.emit('opponentPlaysWrong');
        }
        else {
            CurrentGame[data.idGame].P2.emit('opponentPlaysWrong');
        }
    });

    socket.on('move', function(data) {
        if (data.id % 2 != 0) {
            CurrentGame[data.idGame].P1.emit('opponentMoves', {x: data.x, y: data.y, nbToken: data.nbToken});
        }
        else {
            CurrentGame[data.idGame].P2.emit('opponentMoves', {x: data.x, y: data.y, nbToken: data.nbToken});
        }
    });
});
